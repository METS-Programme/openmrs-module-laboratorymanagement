package org.openmrs.module.labmanagement.web.resource;

import io.swagger.models.Model;
import io.swagger.models.ModelImpl;
import io.swagger.models.properties.*;
import io.swagger.models.properties.StringProperty;
import org.apache.commons.lang.StringUtils;
import org.openmrs.Location;
import org.openmrs.api.context.Context;
import io.swagger.models.properties.*;
import org.openmrs.messagesource.MessageSourceService;
import org.openmrs.module.appframework.service.AppFrameworkService;
import org.openmrs.module.labmanagement.api.ModuleConstants;
import org.openmrs.module.labmanagement.api.Privileges;
import org.openmrs.module.labmanagement.api.LabManagementService;
import org.openmrs.module.labmanagement.api.dto.*;
import org.openmrs.module.labmanagement.api.model.*;
import org.openmrs.module.webservices.rest.SimpleObject;
import org.openmrs.module.webservices.rest.web.RequestContext;
import org.openmrs.module.webservices.rest.web.RestConstants;
import org.openmrs.module.webservices.rest.web.annotation.PropertyGetter;
import org.openmrs.module.webservices.rest.web.annotation.Resource;
import org.openmrs.module.webservices.rest.web.representation.Representation;
import org.openmrs.module.webservices.rest.web.representation.DefaultRepresentation;
import org.openmrs.module.webservices.rest.web.representation.FullRepresentation;
import org.openmrs.module.webservices.rest.web.representation.RefRepresentation;
import org.openmrs.module.webservices.rest.web.resource.api.PageableResult;
import org.openmrs.module.webservices.rest.web.resource.impl.AlreadyPaged;
import org.openmrs.module.webservices.rest.web.resource.impl.DelegatingCrudResource;
import org.openmrs.module.webservices.rest.web.resource.impl.DelegatingResourceDescription;
import org.openmrs.module.webservices.rest.web.resource.impl.NeedsPaging;
import org.openmrs.module.webservices.rest.web.response.IllegalRequestException;
import org.openmrs.module.webservices.rest.web.response.ResourceDoesNotSupportOperationException;
import org.openmrs.module.webservices.rest.web.response.ResponseException;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

@Resource(name = RestConstants.VERSION_1 + "/" + ModuleConstants.MODULE_ID + "/%resourcenamelower%", supportedClass = %resourceclassname%.class, supportedOpenmrsVersions = {
        "1.9.*", "1.10.*", "1.11.*", "1.12.*", "2.*"})
public class %resourceclassname%Resource extends ResourceBase<%resourceclassname%> {

    @Override
    public %resourceclassname% getByUniqueId(String uniqueId) {
         throw new ResourceDoesNotSupportOperationException();
    }

    @Override
    protected void delete(%resourceclassname% delegate, String reason, RequestContext context) throws ResponseException {
         throw new ResourceDoesNotSupportOperationException();
    }

    @Override
    protected PageableResult doSearch(RequestContext context) {
         throw new ResourceDoesNotSupportOperationException();
    }

    @Override
    protected PageableResult doGetAll(RequestContext context) throws ResponseException {
         throw new ResourceDoesNotSupportOperationException();
    }

    @Override
    public %resourceclassname% newDelegate() {
        return new %resourceclassname%();
    }

    @Override
    public %resourceclassname% save(%resourceclassname% delegate) {
        throw new ResourceDoesNotSupportOperationException();
    }

    @Override
    public void purge(%resourceclassname% delegate, RequestContext context) throws ResponseException {
        delete(delegate, null, context);
    }

    @Override
    public DelegatingResourceDescription getRepresentationDescription(Representation rep) {
        DelegatingResourceDescription description = new DelegatingResourceDescription();
        if (rep instanceof DefaultRepresentation || rep instanceof FullRepresentation){
			%defaultFullRepresentation%
		}

		if (rep instanceof DefaultRepresentation){
			%defaultRepresentation%
			description.addLink("full", ".?v=" + RestConstants.REPRESENTATION_FULL);
		}

		if (rep instanceof FullRepresentation){
			%fullRepresentation%
			description.addSelfLink();
		}

		if(rep instanceof RefRepresentation){
			%refRepresentation%
		}

        return description;
    }

@Override
	public Model getGETModel(Representation rep) {
		ModelImpl modelImpl = (ModelImpl) super.getGETModel(rep);
		if (rep instanceof DefaultRepresentation || rep instanceof FullRepresentation) {
			%defaultFullModel%
		}
		if (rep instanceof DefaultRepresentation) {
			%defaultModel%
		}

		if (rep instanceof FullRepresentation) {
			%fullModel%
		}

		if(rep instanceof RefRepresentation){
			%refModel%
		}

		return modelImpl;
	}




}
